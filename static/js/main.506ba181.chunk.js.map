{"version":3,"sources":["components/Navigation.js","components/Cover.js","components/Heading.js","components/SearchBar.js","components/Sorting.js","components/Footer.js","container/App.js","serviceWorker.js","index.js"],"names":["Logo","className","Navigation","Cover","Heading","SearchBar","searchChange","type","placeholder","onChange","Sorting","sort","onClick","Footer","App","onSearchChange","event","setState","searchfield","target","value","sortByPrice","robotSort","state","robots","a","b","price","sortByType","require","this","filteredRobots","filter","robot","model","toLowerCase","includes","sortList","Component","RobotList","map","key","id","Robot","src","alt","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.506ba181.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Navigation.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <h1 className=\"logo\">RoboStore</h1>\r\n    );\r\n}\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <Logo />\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>About</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './css/Cover.css'\r\n\r\nconst Cover = () => {\r\n    return (\r\n        <div className=\"hero\">\r\n            <div className=\"hero-text\">\r\n                <h1>Have a broken robot?</h1>\r\n                <p>\r\n                    At RoboStore we have robots to serve your\r\n                    every need.  Need a nanny-bot?  We got it.\r\n                    Need a cleaning-bot?  We got it. \r\n                    Need a chauffeur-bot?  We got it. \r\n                    You need it.  We got it.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cover;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport Cover from './Cover';\r\n\r\nconst Heading = () => {\r\n    return (\r\n        <div>\r\n            <Navigation />\r\n            <Cover />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Heading;","import React from 'react';\r\nimport './css/SearchBar.css';\r\n\r\nconst SearchBar = ({searchChange}) => {\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <input \r\n                type=\"search\" \r\n                placeholder=\"Enter bot model or type\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './css/Sorting.css';\r\n\r\nconst Sorting = ({sort}) => {\r\n    return (\r\n        <div className=\"sorting\">\r\n            <p>Sort by:</p>\r\n            <ul>\r\n                <li><button onClick={sort[0]}>Price</button></li>\r\n                <li><button onClick={sort[1]}>Type</button></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sorting;","import React from 'react';\r\nimport './css/Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <h3>RoboStore</h3>\r\n            <p>&copy; 2019</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Heading from '../components/Heading';\nimport SearchBar from '../components/SearchBar';\nimport Sorting from '../components/Sorting';\nimport Footer from '../components/Footer';\n\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    }\n  }\n\n  componentDidMount() {\n    const robots = require(\"../robots.json\");\n    this.setState({robots: robots})\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  sortByPrice = () => {\n    const robotSort = this.state.robots.sort((a,b) => a.price - b.price);\n    this.setState({ robots: robotSort});\n  }\n\n  sortByType = () => {\n    const robotSort = this.state.robots.sort((a,b) => {\n      return a.type < b.type ? -1 : (a.type > b.type ? 1 : 0);\n    });\n    this.setState({ robots: robotSort});\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    \n    const filteredRobots = robots.filter(robot => {\n      return robot.model.toLowerCase().includes(searchfield.toLowerCase()) || \n              robot.type.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n    const sortList = [this.sortByPrice, this.sortByType];\n\n    return (\n      <div>\n        <Heading />\n        <SearchBar searchChange={this.onSearchChange}/>\n        <Sorting sort={sortList} />\n        <RobotList robots={filteredRobots} />\n        <Footer />\n      </div>\n    );\n  };\n}\n\nconst RobotList = ({ robots }) => {\n  return (\n    <div className=\"container\">\n      {\n        robots.map(robot => {\n          return (\n            <Robot \n              key={robot.id}\n              id={robot.id}\n              model={robot.model}\n              type={robot.type}\n              price={robot.price}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nconst Robot = ({model, type, price, id}) => {\n  return (\n    <div className=\"card\">\n      <img src={`https://www.robohash.org/${id * 2}`} alt=\"robot\" />\n      <p><strong>{model}</strong></p>\n      <p>{type}</p>\n      <p>{'$' + price}</p>\n      <p><a href=\"#\">Read more...</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}